# This is a basic workflow to help you get started with Actions

name: Context Info

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches-ignore: main
  release:
    types: ['published']
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  Context-Info:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - name: Wait for app build success
      uses: fountainhead/action-wait-for-check@v1.0.0
      id: wait-for-build-success
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        checkName: CI
        ref: ${{ github.event.pull_request.head.sha || github.sha }}
  
    - name: Dump GitHub context
      if: steps.wait-for-build-success.outputs.conclusion == 'success'
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"
    - name: Dump job context
      if: steps.wait-for-build-success.outputs.conclusion == 'success'
      env:
        JOB_CONTEXT: ${{ toJson(job) }}
      run: echo "$JOB_CONTEXT"
    - name: Dump steps context
      if: steps.wait-for-build-success.outputs.conclusion == 'success'
      env:
        STEPS_CONTEXT: ${{ toJson(steps) }}
      run: echo "$STEPS_CONTEXT"
    - name: Dump runner context
      if: steps.wait-for-build-success.outputs.conclusion == 'success'
      env:
        RUNNER_CONTEXT: ${{ toJson(runner) }}
      run: echo "$RUNNER_CONTEXT"
    - name: Dump strategy context
      if: steps.wait-for-build-success.outputs.conclusion == 'success'
      env:
        STRATEGY_CONTEXT: ${{ toJson(strategy) }}
      run: echo "$STRATEGY_CONTEXT"
    - name: Dump matrix context
      if: steps.wait-for-build-success.outputs.conclusion == 'success'
      env:
        MATRIX_CONTEXT: ${{ toJson(matrix) }}
      run: echo "$MATRIX_CONTEXT"
